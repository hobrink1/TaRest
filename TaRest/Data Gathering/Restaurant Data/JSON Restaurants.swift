//
//  JSON Restaurants.swift
//  TaRest
//
//  Created by Hartwig Hopfenzitz on 15.05.21.
//

// file generated by website "https://app.quicktype.io" which creates
// full JSON decode data structures and helper methodes out of JSON example data
// very usefull!!

// created file has been adjusted for internal use

// This file was generated from JSON Schema using quicktype, do not modify it directly.
// To parse the JSON, add this file to your project and do:
//
//   let taRest = try TaRest(json)

import Foundation

// MARK: - TaRestElement
class TaRestElement: Codable {
    var name: String
    var presentationImage: String
    var kitchenTypes: [String]
    var openinghours: [String]
    var location: Location

    enum CodingKeys: String, CodingKey {
        case name = "name"
        case presentationImage = "presentationImage"
        case kitchenTypes = "kitchenTypes"
        case openinghours = "openinghours"
        case location = "location"
    }

    init(name: String, presentationImage: String, kitchenTypes: [String], openinghours: [String], location: Location) {
        self.name = name
        self.presentationImage = presentationImage
        self.kitchenTypes = kitchenTypes
        self.openinghours = openinghours
        self.location = location
    }
}

// MARK: TaRestElement convenience initializers and mutators

extension TaRestElement {
    convenience init(data: Data) throws {
        let me = try newJSONDecoder().decode(TaRestElement.self, from: data)
        self.init(name: me.name, presentationImage: me.presentationImage, kitchenTypes: me.kitchenTypes, openinghours: me.openinghours, location: me.location)
    }

    convenience init(_ json: String, using encoding: String.Encoding = .utf8) throws {
        guard let data = json.data(using: encoding) else {
            throw NSError(domain: "JSONDecoding", code: 0, userInfo: nil)
        }
        try self.init(data: data)
    }

    convenience init(fromURL url: URL) throws {
        try self.init(data: try Data(contentsOf: url))
    }

    func with(
        name: String? = nil,
        presentationImage: String? = nil,
        kitchenTypes: [String]? = nil,
        openinghours: [String]? = nil,
        location: Location? = nil
    ) -> TaRestElement {
        return TaRestElement(
            name: name ?? self.name,
            presentationImage: presentationImage ?? self.presentationImage,
            kitchenTypes: kitchenTypes ?? self.kitchenTypes,
            openinghours: openinghours ?? self.openinghours,
            location: location ?? self.location
        )
    }

    func jsonData() throws -> Data {
        return try newJSONEncoder().encode(self)
    }

    func jsonString(encoding: String.Encoding = .utf8) throws -> String? {
        return String(data: try self.jsonData(), encoding: encoding)
    }
}

// MARK: - Location
class Location: Codable {
    var lon: String
    var lat: String

    enum CodingKeys: String, CodingKey {
        case lon = "lon"
        case lat = "lat"
    }

    init(lon: String, lat: String) {
        self.lon = lon
        self.lat = lat
    }
}

// MARK: Location convenience initializers and mutators

extension Location {
    convenience init(data: Data) throws {
        let me = try newJSONDecoder().decode(Location.self, from: data)
        self.init(lon: me.lon, lat: me.lat)
    }

    convenience init(_ json: String, using encoding: String.Encoding = .utf8) throws {
        guard let data = json.data(using: encoding) else {
            throw NSError(domain: "JSONDecoding", code: 0, userInfo: nil)
        }
        try self.init(data: data)
    }

    convenience init(fromURL url: URL) throws {
        try self.init(data: try Data(contentsOf: url))
    }

    func with(
        lon: String? = nil,
        lat: String? = nil
    ) -> Location {
        return Location(
            lon: lon ?? self.lon,
            lat: lat ?? self.lat
        )
    }

    func jsonData() throws -> Data {
        return try newJSONEncoder().encode(self)
    }

    func jsonString(encoding: String.Encoding = .utf8) throws -> String? {
        return String(data: try self.jsonData(), encoding: encoding)
    }
}

typealias TaRest = [TaRestElement]

extension Array where Element == TaRest.Element {
    init(data: Data) throws {
        self = try newJSONDecoder().decode(TaRest.self, from: data)
    }

    init(_ json: String, using encoding: String.Encoding = .utf8) throws {
        guard let data = json.data(using: encoding) else {
            throw NSError(domain: "JSONDecoding", code: 0, userInfo: nil)
        }
        try self.init(data: data)
    }

    init(fromURL url: URL) throws {
        try self.init(data: try Data(contentsOf: url))
    }

    func jsonData() throws -> Data {
        return try newJSONEncoder().encode(self)
    }

    func jsonString(encoding: String.Encoding = .utf8) throws -> String? {
        return String(data: try self.jsonData(), encoding: encoding)
    }
}

// MARK: - Helper functions for creating encoders and decoders

func newJSONDecoder() -> JSONDecoder {
    let decoder = JSONDecoder()
    if #available(iOS 10.0, OSX 10.12, tvOS 10.0, watchOS 3.0, *) {
        decoder.dateDecodingStrategy = .iso8601
    }
    return decoder
}

func newJSONEncoder() -> JSONEncoder {
    let encoder = JSONEncoder()
    if #available(iOS 10.0, OSX 10.12, tvOS 10.0, watchOS 3.0, *) {
        encoder.dateEncodingStrategy = .iso8601
    }
    return encoder
}
